import spacy
from sentence_transformers import SentenceTransformer, util
import torch

# Load models
nlp = spacy.load("en_core_web_sm")
sbert = SentenceTransformer('all-MiniLM-L6-v2')

# Custom known semantic equivalents (can be expanded)
SEMANTIC_EQUIVALENTS = [
    ("made all the available withdrawals", "already made the maximum allowed withdrawals"),
    ("within the past 10 days", "within the last 10 days"),
]

def break_into_clauses(text):
    """Split text into clauses based on punctuation and conjunctions."""
    doc = nlp(text)
    clauses = []
    for sent in doc.sents:
        chunks = [chunk.strip() for chunk in sent.text.split(",") if chunk.strip()]
        clauses.extend(chunks)
    return [c.lower() for c in clauses]

def match_with_equivalents(clause, other_clauses):
    """Check if clause semantically matches any known equivalents."""
    for c1, c2 in SEMANTIC_EQUIVALENTS:
        if clause in (c1, c2):
            return any(c in other_clauses for c in (c1, c2))
    return False

def compute_semantic_match(clause, other_clauses, threshold=0.82):
    """Use SBERT to compare clause to a list of other clauses"""
    emb_clause = sbert.encode(clause, convert_to_tensor=True)
    emb_others = sbert.encode(other_clauses, convert_to_tensor=True)
    sims = util.cos_sim(emb_clause, emb_others)
    return float(torch.max(sims)) >= threshold

def compare_clauses(ref_text, cand_text, threshold=0.82):
    ref_clauses = break_into_clauses(ref_text)
    cand_clauses = break_into_clauses(cand_text)

    missing = []
    extra = []

    for r in ref_clauses:
        if match_with_equivalents(r, cand_clauses):
            continue
        if not compute_semantic_match(r, cand_clauses, threshold):
            missing.append(r)

    for c in cand_clauses:
        if match_with_equivalents(c, ref_clauses):
            continue
        if not compute_semantic_match(c, ref_clauses, threshold):
            extra.append(c)

    return missing, extra

# === Test it ===

reference = """The rule address freeze restriction failed because the address was changed within the last 10 days, and the request amount is greater than the plan check amount threshold of $10,000. The rule withdrawal counter restriction failed because the participant has already made the maximum allowed withdrawals for the year."""

candidate = """The address was changed within the past 10 days as of the transaction date 2024-12-30 on December 22,2024. The participant has made all the available withdrawals for the year. The address freeze rule works for the period (12-12-2024 to 23-12-2024)"""

missing, extra = compare_clauses(reference, candidate)

print("\nüîç Missing from Candidate:")
for m in missing:
    print(" -", m)

print("\nüßæ Extra in Candidate:")
for e in extra:
    print(" -", e)