from allennlp.predictors.predictor import Predictor
import allennlp_models.tagging
from sentence_transformers import SentenceTransformer, util
import re
import torch

# Load models
srl = Predictor.from_path("https://storage.googleapis.com/allennlp-public-models/bert-base-srl-2020.11.19.tar.gz")
sbert = SentenceTransformer("all-MiniLM-L6-v2")

def clean(text):
    text = re.sub(r'\s+', ' ', text)
    return text.strip().lower()

def extract_srl_triples(text):
    triples = []
    sentences = re.split(r'[.!?]', text)
    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue
        try:
            result = srl.predict(sentence=sentence)
            words = result["words"]
            for verb in result["verbs"]:
                tags = verb["tags"]
                subj, obj = [], []
                predicate = verb["verb"]
                for i, tag in enumerate(tags):
                    if "ARG0" in tag:
                        subj.append(words[i])
                    elif "ARG1" in tag or "ARG2" in tag:
                        obj.append(words[i])
                if subj and obj:
                    triples.append((
                        clean(" ".join(subj)),
                        clean(predicate),
                        clean(" ".join(obj))
                    ))
        except Exception as e:
            print("SRL failed on sentence:", sentence)
            print(e)
    return triples

def triple_similarity(t1, t2, threshold=0.82):
    a = " ".join(t1)
    b = " ".join(t2)
    embeddings = sbert.encode([a, b], convert_to_tensor=True)
    score = util.cos_sim(embeddings[0], embeddings[1]).item()
    return score >= threshold, score

def compare_triples(ref_triples, cand_triples, threshold=0.82):
    missing = []
    extra = []

    matched_ref = set()
    matched_cand = set()

    for i, r in enumerate(ref_triples):
        found = False
        for j, c in enumerate(cand_triples):
            matched, score = triple_similarity(r, c, threshold)
            if matched:
                matched_ref.add(i)
                matched_cand.add(j)
                found = True
                break
        if not found:
            missing.append(r)

    for j, c in enumerate(cand_triples):
        if j not in matched_cand:
            extra.append(c)

    return missing, extra

# === Input ===

reference = """The rule address freeze restriction failed because the address was changed within the last 10 days, and the request amount is greater than the plan check amount threshold of $10,000. The rule withdrawal counter restriction failed because the participant has already made the maximum allowed withdrawals for the year."""

candidate = """The address was changed within the past 10 days as of the transaction date 2024-12-30 on December 22,2024. The participant has made all the available withdrawals for the year. The address freeze rule works for the period (12-12-2024 to 23-12-2024)"""

# === Run ===

ref_triples = extract_srl_triples(reference)
cand_triples = extract_srl_triples(candidate)
missing, extra = compare_triples(ref_triples, cand_triples)

# === Output ===

print("\nüîç MISSING INFORMATION:")
for t in missing:
    print(" -", t)

print("\nüßæ EXTRA INFORMATION:")
for t in extra:
    print(" -", t)