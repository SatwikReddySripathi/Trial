import React, { useState, useEffect } from ‘react’;
import { Card, CardContent, CardHeader, CardTitle } from ‘@/components/ui/alert’;

const HallucinationDetectionUI = () => {
const [referenceText, setReferenceText] = useState(`The Eiffel Tower is a wrought-iron lattice tower on the Champ de Mars in Paris, France. It is named after the engineer Gustave Eiffel, whose company designed and built the tower. Constructed from 1887 to 1889, it was the world's tallest man-made structure until 1930.`);

const [modelParagraphs, setModelParagraphs] = useState([
“The Eiffel Tower is located in Paris, France and was built by Gustave Eiffel’s company. It was constructed between 1887 and 1889 and held the record as the world’s tallest structure until 1930.”,
“The Eiffel Tower in London is made of steel and was built in 1890 by Thomas Edison. It stands 400 meters tall and is painted blue.”,
“The tower in Paris was designed by Gustave Eiffel and is made of wrought iron. However, it was completed in 1885 and is located near the Seine River.”,
“Paris has a famous iron tower called the Eiffel Tower, built in the late 1800s. It was the tallest building until the 1930s when other structures surpassed it.”
]);

const [results, setResults] = useState(null);
const [isProcessing, setIsProcessing] = useState(false);
const [selectedNode, setSelectedNode] = useState(null);

// Mock analysis results for demonstration
const mockAnalysis = {
overall_scores: {
reliability_score: 0.75,
factual_score: 0.80,
semantic_score: 0.72,
information_completeness: 0.85
},
classifications: [
‘Consistent paragraphs’,
‘Factual error’,
‘Misleading’,
‘Consistent paragraphs’
],
similarities: [
{ aggregate_semantic_score: 0.89, tfidf_similarity: 0.85, jaccard_similarity: 0.76, bert_similarity: 0.92 },
{ aggregate_semantic_score: 0.32, tfidf_similarity: 0.28, jaccard_similarity: 0.25, bert_similarity: 0.45 },
{ aggregate_semantic_score: 0.67, tfidf_similarity: 0.72, jaccard_similarity: 0.58, bert_similarity: 0.71 },
{ aggregate_semantic_score: 0.84, tfidf_similarity: 0.81, jaccard_similarity: 0.79, bert_similarity: 0.86 }
],
entity_comparisons: [
{ overall_entity_similarity: 0.91, persons_similarity: 1.0, locations_similarity: 1.0, dates_similarity: 1.0 },
{ overall_entity_similarity: 0.23, persons_similarity: 0.0, locations_similarity: 0.0, dates_similarity: 0.0 },
{ overall_entity_similarity: 0.76, persons_similarity: 1.0, locations_similarity: 1.0, dates_similarity: 0.5 },
{ overall_entity_similarity: 0.88, persons_similarity: 0.0, locations_similarity: 1.0, dates_similarity: 0.8 }
],
shannon_entropy: 4.23
};

const getClassificationColor = (classification) => {
const colorMap = {
‘Factual error’: ‘bg-red-500’,
‘Contradicts’: ‘bg-red-500’,
‘Omission’: ‘bg-orange-500’,
‘Extra information’: ‘bg-yellow-500’,
‘Misleading’: ‘bg-red-400’,
‘Consistent paragraphs’: ‘bg-blue-500’
};
return colorMap[classification] || ‘bg-gray-500’;
};

const getClassificationTextColor = (classification) => {
const colorMap = {
‘Factual error’: ‘text-red-700’,
‘Contradicts’: ‘text-red-700’,
‘Omission’: ‘text-orange-700’,
‘Extra information’: ‘text-yellow-700’,
‘Misleading’: ‘text-red-600’,
‘Consistent paragraphs’: ‘text-blue-700’
};
return colorMap[classification] || ‘text-gray-700’;
};

const runAnalysis = async () => {
setIsProcessing(true);

```
// Simulate processing time
setTimeout(() => {
  setResults(mockAnalysis);
  setIsProcessing(false);
}, 2000);
```

};

const addParagraph = () => {
setModelParagraphs([…modelParagraphs, “”]);
};

const removeParagraph = (index) => {
setModelParagraphs(modelParagraphs.filter((_, i) => i !== index));
};

const updateParagraph = (index, value) => {
const updated = […modelParagraphs];
updated[index] = value;
setModelParagraphs(updated);
};

return (
<div className="max-w-7xl mx-auto p-6 bg-gray-50 min-h-screen">
<div className="mb-8">
<h1 className="text-4xl font-bold text-gray-800 mb-2">Hallucination Detection Pipeline</h1>
<p className="text-lg text-gray-600">Analyze LLM-generated content for factual consistency, semantic similarity, and hallucinations</p>
</div>

```
  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
    {/* Input Section */}
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Reference Paragraph</CardTitle>
        </CardHeader>
        <CardContent>
          <textarea
            value={referenceText}
            onChange={(e) => setReferenceText(e.target.value)}
            className="w-full h-32 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter the reference paragraph..."
          />
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="flex justify-between items-center">
            Model Generated Paragraphs
            <button
              onClick={addParagraph}
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 text-sm"
            >
              Add Paragraph
            </button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {modelParagraphs.map((paragraph, index) => (
              <div key={index} className="relative">
                <div className="flex items-start gap-2">
                  <span className="text-sm font-medium text-gray-500 mt-3 min-w-[20px]">{index + 1}.</span>
                  <textarea
                    value={paragraph}
                    onChange={(e) => updateParagraph(index, e.target.value)}
                    className="flex-1 h-24 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder={`Enter paragraph ${index + 1}...`}
                  />
                  {modelParagraphs.length > 1 && (
                    <button
                      onClick={() => removeParagraph(index)}
                      className="mt-2 p-2 text-red-500 hover:bg-red-50 rounded-lg"
                    >
                      ✕
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <button
        onClick={runAnalysis}
        disabled={isProcessing}
        className="w-full py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg font-semibold text-lg hover:from-blue-600 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {isProcessing ? (
          <div className="flex items-center justify-center gap-2">
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
            Processing...
          </div>
        ) : (
          'Run Hallucination Detection'
        )}
      </button>
    </div>

    {/* Results Section */}
    <div className="space-y-6">
      {results && (
        <>
          {/* Overall Scores */}
          <Card>
            <CardHeader>
              <CardTitle>Overall Scores</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-4">
                {Object.entries(results.overall_scores).map(([key, value]) => (
                  <div key={key} className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-sm font-medium text-gray-600 capitalize mb-1">
                      {key.replace('_', ' ')}
                    </div>
                    <div className="text-2xl font-bold text-gray-800">
                      {(value * 100).toFixed(1)}%
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                      <div
                        className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                        style={{ width: `${value * 100}%` }}
                      ></div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                <div className="text-sm font-medium text-blue-700">Shannon Entropy</div>
                <div className="text-lg font-bold text-blue-800">{results.shannon_entropy.toFixed(2)}</div>
                <div className="text-xs text-blue-600">Higher values indicate more uncertainty</div>
              </div>
            </CardContent>
          </Card>

          {/* Classification Results */}
          <Card>
            <CardHeader>
              <CardTitle>Paragraph Classifications</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {results.classifications.map((classification, index) => (
                  <div
                    key={index}
                    className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow cursor-pointer"
                    onClick={() => setSelectedNode(selectedNode === index ? null : index)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className={`w-4 h-4 rounded-full ${getClassificationColor(classification)}`}></div>
                        <span className="font-medium">Paragraph {index + 1}</span>
                        <span className={`text-sm font-medium ${getClassificationTextColor(classification)}`}>
                          {classification}
                        </span>
                      </div>
                      <div className="text-sm text-gray-500">
                        {(results.similarities[index].aggregate_semantic_score * 100).toFixed(1)}% similarity
                      </div>
                    </div>
                    
                    {selectedNode === index && (
                      <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <strong>Semantic Scores:</strong>
                            <ul className="mt-1 space-y-1">
                              <li>TF-IDF: {(results.similarities[index].tfidf_similarity * 100).toFixed(1)}%</li>
                              <li>Jaccard: {(results.similarities[index].jaccard_similarity * 100).toFixed(1)}%</li>
                              <li>BERT: {(results.similarities[index].bert_similarity * 100).toFixed(1)}%</li>
                            </ul>
                          </div>
                          <div>
                            <strong>Entity Similarity:</strong>
                            <ul className="mt-1 space-y-1">
                              <li>Overall: {(results.entity_comparisons[index].overall_entity_similarity * 100).toFixed(1)}%</li>
                              <li>Persons: {(results.entity_comparisons[index].persons_similarity * 100).toFixed(1)}%</li>
                              <li>Locations: {(results.entity_comparisons[index].locations_similarity * 100).toFixed(1)}%</li>
                              <li>Dates: {(results.entity_comparisons[index].dates_similarity * 100).toFixed(1)}%</li>
                            </ul>
                          </div>
                        </div>
                        <div className="mt-3 p-2 bg-white rounded border text-xs">
                          <strong>Text Preview:</strong> {modelParagraphs[index].substring(0, 150)}...
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Graph Visualization Placeholder */}
          <Card>
            <CardHeader>
              <CardTitle>3D Graph Visualization</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-100 rounded-lg p-8 text-center">
                <div className="space-y-4">
                  <div className="text-gray-600">Interactive 3D graph would appear here</div>
                  <div className="flex justify-center space-x-6">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                      <span className="text-sm">Consistent</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                      <span className="text-sm">Hallucination</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                      <span className="text-sm">Omission</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                      <span className="text-sm">Extra Info</span>
                    </div>
                  </div>
                  <div className="text-sm text-gray-500">
                    Run the Python pipeline to generate the interactive 3D visualization
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </>
      )}

      {!results && (
        <Card>
          <CardContent className="text-center py-12">
            <div className="text-gray-500 text-lg">
              Enter your reference paragraph and model-generated paragraphs above, then click "Run Hallucination Detection" to see the analysis results.
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  </div>

  {/* Legend */}
  <Card className="mt-8">
    <CardHeader>
      <CardTitle>Classification Legend</CardTitle>
    </CardHeader>
    <CardContent>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
        {[
          { name: 'Consistent paragraphs', color: 'bg-blue-500', desc: 'Matches reference well' },
          { name: 'Factual error', color: 'bg-red-500', desc: 'Contains incorrect facts' },
          { name: 'Contradicts', color: 'bg-red-500', desc: 'Contradicts reference' },
          { name: 'Omission', color: 'bg-orange-500', desc: 'Missing information' },
          { name: 'Extra information', color: 'bg-yellow-500', desc: 'Additional content' },
          { name: 'Misleading', color: 'bg-red-400', desc: 'Partially correct but misleading' }
        ].map((item) => (
          <div key={item.name} className="text-center">
            <div className={`w-6 h-6 ${item.color} rounded-full mx-auto mb-2`}></div>
            <div className="text-sm font-medium">{item.name}</div>
            <div className="text-xs text-gray-500 mt-1">{item.desc}</div>
          </div>
        ))}
      </div>
    </CardContent>
  </Card>
</div>
```

);
};

export default HallucinationDetectionUI;